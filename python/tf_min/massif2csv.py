"""
    TFMin v1.0 Minimal TensorFlow to C++ exporter
    ------------------------------------------

    Copyright (C) 2019 Pete Blacker, Surrey Space Centre & Airbus Defence and
    Space Ltd.
    Pete.Blacker@Surrey.ac.uk
    https://www.surrey.ac.uk/surrey-space-centre/research-groups/on-board-data-handling

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    in the LICENCE file of this software.  If not, see
    <http://www.gnu.org/licenses/>.

    ---------------------------------------------------------------------

    Utility to convert files generated by the Valgrind Massif tool into CSV
    format. Useful for plotting this data in different programs.
"""

import argparse
import os
import sys
import numpy as np
import struct


FLAGS = None


def convert_file(file_name):

    print("Converting massif file to csv.")

    input = open(file_name, "r")
    output = open(file_name + ".csv", "w")

    output.write("shapshot, time, heap, heap extra, stacks, total\n")

    time = None
    snapshot = None
    heap = None
    heap_extra = None
    stacks = None

    line = "not nothing"
    while line != "":
        line = input.readline()

        elements = line.split("=")
        if len(elements) == 2:

            if elements[0] == "snapshot":
                snapshot = elements[1]

            if elements[0] == "time":
                time = elements[1]

            if elements[0] == "mem_heap_B":
                heap = elements[1]

            if elements[0] == "mem_heap_extra_B":
                heap_extra = elements[1]

            if elements[0] == "mem_stacks_B":
                stacks = elements[1]

            if snapshot is not None and \
                    time is not None and \
                    heap is not None and \
                    heap_extra is not None and \
                    stacks is not None:

                output.write("%s, %s, %s, %s, %s, %d\n" %
                             (snapshot.rstrip('\n'),
                              time.rstrip('\n'),
                              heap.rstrip('\n'),
                              heap_extra.rstrip('\n'),
                              stacks.rstrip('\n'),
                              int(heap) + int(heap_extra) + int(stacks)))

                snapshot = time = heap = heap_extra = stacks = None

    input.close()
    output.close()


def main(_):

    print("------------------------------------------")
    print("       Massif  to CSV file converter.")
    print("------------------------------------------")
    print("input file \"%s\"" % FLAGS.file)

    convert_file(FLAGS.file)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--file', nargs='?', const=True,
                        default="no_file",
                        help='name of the .xyz file to process.')

    FLAGS, unparsed = parser.parse_known_args()

    main(unparsed)
