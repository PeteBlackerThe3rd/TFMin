/*
    TFMin v1.0 Minimal TensorFlow to C++ exporter
    ------------------------------------------

    Copyright (C) 2019 Pete Blacker, Surrey Space Centre & Airbus Defence and Space Ltd.
    Pete.Blacker@Surrey.ac.uk
    https://www.surrey.ac.uk/surrey-space-centre/research-groups/on-board-data-handling

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    in the LICENCE file of this software.  If not, see
    <http://www.gnu.org/licenses/>.

    ---------------------------------------------------------------------

    Simple example integrating the c++ SqueezeNet inference model
    generated by TFMin with an application
*/
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <mutex>
#include <unsupported/Eigen/CXX11/Tensor>
#include "mobile_net.h"

//#define INFER
#define TIMING
//#define VAL

int main()
{
    // declare input and output buffers
	float input[224 * 224 * 3];
	int output_estimate;

    // create Eigen device object
#ifdef EIGEN_USE_THREADS
	Eigen::ThreadPool pool(2);
	Eigen::ThreadPoolDevice device(&pool, 2);
#else
	Eigen::DefaultDevice device;
#endif

    // Instantiate SqueezeNet inference model
    MobileNet model;

#ifdef TIMING
    std::cout << "Timing Model." << std::endl;
    model.timing(device, input, &output_estimate, true);
    std::cout << "Timing complete." << std::endl;
#endif

#ifdef INFER
    std::cout << "Infering with Model." << std::endl;
    model.eval(device, input, &output_estimate);
    std::cout << "Inference complete." << std::endl;
#endif

#ifdef VAL
    std::cout << "Validating Model." << std::endl;
    model.validate(device);
    std::cout << "Validation complete." << std::endl;
#endif

	return 0;
}
