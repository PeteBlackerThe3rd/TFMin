# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Operator(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsOperator(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Operator()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def OperatorBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x46\x4C\x33", size_prefixed=size_prefixed)

    # Operator
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Operator
    def OpcodeIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Operator
    def Inputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Operator
    def InputsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Operator
    def InputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Operator
    def InputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Operator
    def Outputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Operator
    def OutputsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Operator
    def OutputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Operator
    def OutputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Operator
    def BuiltinOptionsType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Operator
    def BuiltinOptions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # Operator
    def CustomOptions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Operator
    def CustomOptionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Operator
    def CustomOptionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Operator
    def CustomOptionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Operator
    def CustomOptionsFormat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Operator
    def MutatingVariableInputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.BoolFlags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Operator
    def MutatingVariableInputsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # Operator
    def MutatingVariableInputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Operator
    def MutatingVariableInputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def OperatorStart(builder): builder.StartObject(8)
def OperatorAddOpcodeIndex(builder, opcodeIndex): builder.PrependUint32Slot(0, opcodeIndex, 0)
def OperatorAddInputs(builder, inputs): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(inputs), 0)
def OperatorStartInputsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OperatorAddOutputs(builder, outputs): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(outputs), 0)
def OperatorStartOutputsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OperatorAddBuiltinOptionsType(builder, builtinOptionsType): builder.PrependUint8Slot(3, builtinOptionsType, 0)
def OperatorAddBuiltinOptions(builder, builtinOptions): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(builtinOptions), 0)
def OperatorAddCustomOptions(builder, customOptions): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(customOptions), 0)
def OperatorStartCustomOptionsVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def OperatorAddCustomOptionsFormat(builder, customOptionsFormat): builder.PrependInt8Slot(6, customOptionsFormat, 0)
def OperatorAddMutatingVariableInputs(builder, mutatingVariableInputs): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(mutatingVariableInputs), 0)
def OperatorStartMutatingVariableInputsVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def OperatorEnd(builder): return builder.EndObject()

import tflite.AbsOptions
import tflite.AddNOptions
import tflite.AddOptions
import tflite.ArgMaxOptions
import tflite.ArgMinOptions
import tflite.BatchToSpaceNDOptions
import tflite.BidirectionalSequenceLSTMOptions
import tflite.BidirectionalSequenceRNNOptions
import tflite.BuiltinOptions
import tflite.CallOptions
import tflite.CastOptions
import tflite.ConcatEmbeddingsOptions
import tflite.ConcatenationOptions
import tflite.Conv2DOptions
import tflite.CosOptions
import tflite.DepthwiseConv2DOptions
import tflite.DequantizeOptions
import tflite.DivOptions
import tflite.EmbeddingLookupSparseOptions
import tflite.EqualOptions
import tflite.ExpOptions
import tflite.ExpandDimsOptions
import tflite.FakeQuantOptions
import tflite.FillOptions
import tflite.FloorDivOptions
import tflite.FloorModOptions
import tflite.FullyConnectedOptions
import tflite.GatherNdOptions
import tflite.GatherOptions
import tflite.GreaterEqualOptions
import tflite.GreaterOptions
import tflite.HardSwishOptions
import tflite.L2NormOptions
import tflite.LSHProjectionOptions
import tflite.LSTMOptions
import tflite.LeakyReluOptions
import tflite.LessEqualOptions
import tflite.LessOptions
import tflite.LocalResponseNormalizationOptions
import tflite.LogSoftmaxOptions
import tflite.LogicalAndOptions
import tflite.LogicalNotOptions
import tflite.LogicalOrOptions
import tflite.MatrixDiagOptions
import tflite.MatrixSetDiagOptions
import tflite.MaximumMinimumOptions
import tflite.MirrorPadOptions
import tflite.MulOptions
import tflite.NegOptions
import tflite.NotEqualOptions
import tflite.OneHotOptions
import tflite.PackOptions
import tflite.PadOptions
import tflite.PadV2Options
import tflite.Pool2DOptions
import tflite.PowOptions
import tflite.QuantizeOptions
import tflite.RNNOptions
import tflite.RangeOptions
import tflite.RankOptions
import tflite.ReducerOptions
import tflite.ReshapeOptions
import tflite.ResizeBilinearOptions
import tflite.ResizeNearestNeighborOptions
import tflite.ReverseSequenceOptions
import tflite.ReverseV2Options
import tflite.SVDFOptions
import tflite.SelectOptions
import tflite.SequenceRNNOptions
import tflite.ShapeOptions
import tflite.SkipGramOptions
import tflite.SliceOptions
import tflite.SoftmaxOptions
import tflite.SpaceToBatchNDOptions
import tflite.SpaceToDepthOptions
import tflite.SparseToDenseOptions
import tflite.SplitOptions
import tflite.SplitVOptions
import tflite.SquareOptions
import tflite.SquaredDifferenceOptions
import tflite.SqueezeOptions
import tflite.StridedSliceOptions
import tflite.SubOptions
import tflite.TileOptions
import tflite.TopKV2Options
import tflite.TransposeConvOptions
import tflite.TransposeOptions
import tflite.UnidirectionalSequenceLSTMOptions
import tflite.UniqueOptions
import tflite.UnpackOptions
import tflite.WhereOptions
import tflite.ZerosLikeOptions
try:
    from typing import List, Union
except:
    pass

class OperatorT(object):

    # OperatorT
    def __init__(self):
        self.opcodeIndex = 0  # type: int
        self.inputs = None  # type: List[int]
        self.outputs = None  # type: List[int]
        self.builtinOptionsType = 0  # type: int
        self.builtinOptions = None  # type: Union[None, tflite.Conv2DOptions.Conv2DOptionsT, tflite.DepthwiseConv2DOptions.DepthwiseConv2DOptionsT, tflite.ConcatEmbeddingsOptions.ConcatEmbeddingsOptionsT, tflite.LSHProjectionOptions.LSHProjectionOptionsT, tflite.Pool2DOptions.Pool2DOptionsT, tflite.SVDFOptions.SVDFOptionsT, tflite.RNNOptions.RNNOptionsT, tflite.FullyConnectedOptions.FullyConnectedOptionsT, tflite.SoftmaxOptions.SoftmaxOptionsT, tflite.ConcatenationOptions.ConcatenationOptionsT, tflite.AddOptions.AddOptionsT, tflite.L2NormOptions.L2NormOptionsT, tflite.LocalResponseNormalizationOptions.LocalResponseNormalizationOptionsT, tflite.LSTMOptions.LSTMOptionsT, tflite.ResizeBilinearOptions.ResizeBilinearOptionsT, tflite.CallOptions.CallOptionsT, tflite.ReshapeOptions.ReshapeOptionsT, tflite.SkipGramOptions.SkipGramOptionsT, tflite.SpaceToDepthOptions.SpaceToDepthOptionsT, tflite.EmbeddingLookupSparseOptions.EmbeddingLookupSparseOptionsT, tflite.MulOptions.MulOptionsT, tflite.PadOptions.PadOptionsT, tflite.GatherOptions.GatherOptionsT, tflite.BatchToSpaceNDOptions.BatchToSpaceNDOptionsT, tflite.SpaceToBatchNDOptions.SpaceToBatchNDOptionsT, tflite.TransposeOptions.TransposeOptionsT, tflite.ReducerOptions.ReducerOptionsT, tflite.SubOptions.SubOptionsT, tflite.DivOptions.DivOptionsT, tflite.SqueezeOptions.SqueezeOptionsT, tflite.SequenceRNNOptions.SequenceRNNOptionsT, tflite.StridedSliceOptions.StridedSliceOptionsT, tflite.ExpOptions.ExpOptionsT, tflite.TopKV2Options.TopKV2OptionsT, tflite.SplitOptions.SplitOptionsT, tflite.LogSoftmaxOptions.LogSoftmaxOptionsT, tflite.CastOptions.CastOptionsT, tflite.DequantizeOptions.DequantizeOptionsT, tflite.MaximumMinimumOptions.MaximumMinimumOptionsT, tflite.ArgMaxOptions.ArgMaxOptionsT, tflite.LessOptions.LessOptionsT, tflite.NegOptions.NegOptionsT, tflite.PadV2Options.PadV2OptionsT, tflite.GreaterOptions.GreaterOptionsT, tflite.GreaterEqualOptions.GreaterEqualOptionsT, tflite.LessEqualOptions.LessEqualOptionsT, tflite.SelectOptions.SelectOptionsT, tflite.SliceOptions.SliceOptionsT, tflite.TransposeConvOptions.TransposeConvOptionsT, tflite.SparseToDenseOptions.SparseToDenseOptionsT, tflite.TileOptions.TileOptionsT, tflite.ExpandDimsOptions.ExpandDimsOptionsT, tflite.EqualOptions.EqualOptionsT, tflite.NotEqualOptions.NotEqualOptionsT, tflite.ShapeOptions.ShapeOptionsT, tflite.PowOptions.PowOptionsT, tflite.ArgMinOptions.ArgMinOptionsT, tflite.FakeQuantOptions.FakeQuantOptionsT, tflite.PackOptions.PackOptionsT, tflite.LogicalOrOptions.LogicalOrOptionsT, tflite.OneHotOptions.OneHotOptionsT, tflite.LogicalAndOptions.LogicalAndOptionsT, tflite.LogicalNotOptions.LogicalNotOptionsT, tflite.UnpackOptions.UnpackOptionsT, tflite.FloorDivOptions.FloorDivOptionsT, tflite.SquareOptions.SquareOptionsT, tflite.ZerosLikeOptions.ZerosLikeOptionsT, tflite.FillOptions.FillOptionsT, tflite.BidirectionalSequenceLSTMOptions.BidirectionalSequenceLSTMOptionsT, tflite.BidirectionalSequenceRNNOptions.BidirectionalSequenceRNNOptionsT, tflite.UnidirectionalSequenceLSTMOptions.UnidirectionalSequenceLSTMOptionsT, tflite.FloorModOptions.FloorModOptionsT, tflite.RangeOptions.RangeOptionsT, tflite.ResizeNearestNeighborOptions.ResizeNearestNeighborOptionsT, tflite.LeakyReluOptions.LeakyReluOptionsT, tflite.SquaredDifferenceOptions.SquaredDifferenceOptionsT, tflite.MirrorPadOptions.MirrorPadOptionsT, tflite.AbsOptions.AbsOptionsT, tflite.SplitVOptions.SplitVOptionsT, tflite.UniqueOptions.UniqueOptionsT, tflite.ReverseV2Options.ReverseV2OptionsT, tflite.AddNOptions.AddNOptionsT, tflite.GatherNdOptions.GatherNdOptionsT, tflite.CosOptions.CosOptionsT, tflite.WhereOptions.WhereOptionsT, tflite.RankOptions.RankOptionsT, tflite.ReverseSequenceOptions.ReverseSequenceOptionsT, tflite.MatrixDiagOptions.MatrixDiagOptionsT, tflite.QuantizeOptions.QuantizeOptionsT, tflite.MatrixSetDiagOptions.MatrixSetDiagOptionsT, tflite.HardSwishOptions.HardSwishOptionsT]
        self.customOptions = None  # type: List[int]
        self.customOptionsFormat = 0  # type: int
        self.mutatingVariableInputs = None  # type: List[bool]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        operator = Operator()
        operator.Init(buf, pos)
        return cls.InitFromObj(operator)

    @classmethod
    def InitFromObj(cls, operator):
        x = OperatorT()
        x._UnPack(operator)
        return x

    # OperatorT
    def _UnPack(self, operator):
        if operator is None:
            return
        self.opcodeIndex = operator.OpcodeIndex()
        if not operator.InputsIsNone():
            if np is None:
                self.inputs = []
                for i in range(operator.InputsLength()):
                    self.inputs.append(operator.Inputs(i))
            else:
                self.inputs = operator.InputsAsNumpy()
        if not operator.OutputsIsNone():
            if np is None:
                self.outputs = []
                for i in range(operator.OutputsLength()):
                    self.outputs.append(operator.Outputs(i))
            else:
                self.outputs = operator.OutputsAsNumpy()
        self.builtinOptionsType = operator.BuiltinOptionsType()
        self.builtinOptions = tflite.BuiltinOptions.BuiltinOptionsCreator(self.builtinOptionsType, operator.BuiltinOptions())
        if not operator.CustomOptionsIsNone():
            if np is None:
                self.customOptions = []
                for i in range(operator.CustomOptionsLength()):
                    self.customOptions.append(operator.CustomOptions(i))
            else:
                self.customOptions = operator.CustomOptionsAsNumpy()
        self.customOptionsFormat = operator.CustomOptionsFormat()
        if not operator.MutatingVariableInputsIsNone():
            if np is None:
                self.mutatingVariableInputs = []
                for i in range(operator.MutatingVariableInputsLength()):
                    self.mutatingVariableInputs.append(operator.MutatingVariableInputs(i))
            else:
                self.mutatingVariableInputs = operator.MutatingVariableInputsAsNumpy()

    # OperatorT
    def Pack(self, builder):
        if self.inputs is not None:
            if np is not None and type(self.inputs) is np.ndarray:
                inputs = builder.CreateNumpyVector(self.inputs)
            else:
                OperatorStartInputsVector(builder, len(self.inputs))
                for i in reversed(range(len(self.inputs))):
                    builder.PrependInt32(self.inputs[i])
                inputs = builder.EndVector(len(self.inputs))
        if self.outputs is not None:
            if np is not None and type(self.outputs) is np.ndarray:
                outputs = builder.CreateNumpyVector(self.outputs)
            else:
                OperatorStartOutputsVector(builder, len(self.outputs))
                for i in reversed(range(len(self.outputs))):
                    builder.PrependInt32(self.outputs[i])
                outputs = builder.EndVector(len(self.outputs))
        if self.builtinOptions is not None:
            builtinOptions = self.builtinOptions.Pack(builder)
        if self.customOptions is not None:
            if np is not None and type(self.customOptions) is np.ndarray:
                customOptions = builder.CreateNumpyVector(self.customOptions)
            else:
                OperatorStartCustomOptionsVector(builder, len(self.customOptions))
                for i in reversed(range(len(self.customOptions))):
                    builder.PrependUint8(self.customOptions[i])
                customOptions = builder.EndVector(len(self.customOptions))
        if self.mutatingVariableInputs is not None:
            if np is not None and type(self.mutatingVariableInputs) is np.ndarray:
                mutatingVariableInputs = builder.CreateNumpyVector(self.mutatingVariableInputs)
            else:
                OperatorStartMutatingVariableInputsVector(builder, len(self.mutatingVariableInputs))
                for i in reversed(range(len(self.mutatingVariableInputs))):
                    builder.PrependBool(self.mutatingVariableInputs[i])
                mutatingVariableInputs = builder.EndVector(len(self.mutatingVariableInputs))
        OperatorStart(builder)
        OperatorAddOpcodeIndex(builder, self.opcodeIndex)
        if self.inputs is not None:
            OperatorAddInputs(builder, inputs)
        if self.outputs is not None:
            OperatorAddOutputs(builder, outputs)
        OperatorAddBuiltinOptionsType(builder, self.builtinOptionsType)
        if self.builtinOptions is not None:
            OperatorAddBuiltinOptions(builder, builtinOptions)
        if self.customOptions is not None:
            OperatorAddCustomOptions(builder, customOptions)
        OperatorAddCustomOptionsFormat(builder, self.customOptionsFormat)
        if self.mutatingVariableInputs is not None:
            OperatorAddMutatingVariableInputs(builder, mutatingVariableInputs)
        operator = OperatorEnd(builder)
        return operator
